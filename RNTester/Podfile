# [TODO(macOS GH#217)
#
# This monkey-patching of the CocoaPods Specification class will strip our MS versions from the specifications and
# replace them with `1000.0.0`, which is the version that upstream always has set in `master`.
module StripMSVersion
  require 'cocoapods-core/specification'
  Pod::Specification.prepend(self)

  def source=(source)
    if source.is_a?(Hash) && source.has_key?(:tag)
      super(source.merge(:tag => StripMSVersion.strip(source[:tag])))
    else
      super
    end
  end

  def version=(version)
    super(StripMSVersion.strip(version))
  end

  def dependency(dep, *args)
    version, *other_version_requirements = args
    super(dep, *[StripMSVersion.strip(version), *other_version_requirements].compact)
  end

  private

  CURRENT_VERSION = JSON.parse(File.read('../package.json'))['version']

  def self.strip(version)
    version && (version == CURRENT_VERSION ? '1000.0.0' : version)
  end
end
# ]TODO(macOS GH#214)

source 'https://cdn.cocoapods.org/'

require_relative '../scripts/autolink-ios'

# TODO(macOS GH#214)
# Otherwise duplicate UUIDs are being generated between the iOS and macOS targets.
# FIXME: https://github.com/microsoft/react-native/issues/210
install! 'cocoapods', :deterministic_uuids => false

if ENV['USE_FRAMEWORKS'] == '1'
  puts "Installing pods with use_frameworks!"
  use_frameworks!
end

def pods()
  project 'RNTesterPods.xcodeproj'

  # Enable TurboModule
  use_react_native!(path: "..")
  pod 'ReactCommon/turbomodule/samples', :path => '../ReactCommon'

  # Additional Pods which aren't included in the default Podfile
  pod 'React-ART', :path => '../Libraries/ART'
  pod 'React-RCTPushNotification', :path => '../Libraries/PushNotificationIOS'
  pod 'Yoga',:path => '../ReactCommon/yoga', :modular_headers => true
  # Additional Pods which are classed as unstable
  #
  # To use fabric: add `fabric_enabled` option to the use_react_native method above, like below
  # use_react_native!(path: "..", fabric_enabled: true)
end

  
def flipper_pods()
  flipperkit_version = '0.30.1'
  pod 'FlipperKit', '~>' + flipperkit_version, :configuration => 'Debug'
  pod 'FlipperKit/FlipperKitLayoutPlugin', '~>' + flipperkit_version, :configuration => 'Debug'
  pod 'FlipperKit/SKIOSNetworkPlugin', '~>' + flipperkit_version, :configuration => 'Debug'
  pod 'FlipperKit/FlipperKitUserDefaultsPlugin', '~>' + flipperkit_version, :configuration => 'Debug'
  pod 'FlipperKit/FlipperKitReactPlugin', '~>' + flipperkit_version, :configuration => 'Debug'

  if ENV['USE_FRAMEWORKS'] == '1'
    $static_framework = ['FlipperKit', 'Flipper', 'Flipper-Folly',
        'CocoaAsyncSocket', 'ComponentKit', 'Flipper-DoubleConversion',
        'Flipper-Glog', 'Flipper-PeerTalk', 'Flipper-RSocket',
        'CocoaLibEvent', 'OpenSSL-Universal', 'boost-for-react-native']

    pre_install do |installer|
      Pod::Installer::Xcode::TargetValidator.send(:define_method, :verify_no_static_framework_transitive_dependencies) {}
      installer.pod_targets.each do |pod|
          if $static_framework.include?(pod.name)
            def pod.build_type;
              Pod::Target::BuildType.static_library
            end
          end
        end
    end
  end
end

# Post Install processing for Flipper
def flipper_post_install(installer)
  file_name = Dir.glob("*.xcodeproj")[0]
  app_project = Xcodeproj::Project.open(file_name)
  app_project.native_targets.each do |target|
    target.build_configurations.each do |config|
      cflags = config.build_settings['OTHER_CFLAGS'] || '$(inherited) '
      unless cflags.include? '-DFB_SONARKIT_ENABLED=1'
        puts 'Adding -DFB_SONARKIT_ENABLED=1 in OTHER_CFLAGS...'
        cflags << ' -DFB_SONARKIT_ENABLED=1 '
      end
      config.build_settings['OTHER_CFLAGS'] = cflags
    end
    app_project.save
  end
  installer.pods_project.save
end

target 'RNTester' do
  platform :ios, '9.0'
  pods()
  flipper_pods()
end

target 'RNTester-macOS' do
  platform :osx, '10.14'
  # TODO: Point to actual release
  pod 'hermes', :http => 'https://github.com/alloy/hermes/releases/download/v0.4.1-macOS/hermes-v0.4.1.zip'
  pod 'libevent', :podspec => "../third-party-podspecs/libevent.podspec"
  pods()
end

target 'RNTesterUnitTests' do
  platform :ios, '9.0'
  pods()
  pod 'React-RCTTest', :path => "RCTTest"
end

target 'RNTester-macOSUnitTests' do
  platform :osx, '10.14'
  pods()
  pod 'React-RCTTest', :path => "RCTTest"
end

target 'RNTesterIntegrationTests' do
  platform :ios, '9.0'
  pods()
  pod 'React-RCTTest', :path => "RCTTest"
end

target 'RNTester-macOSIntegrationTests' do
  platform :osx, '10.14'
  pods()
  pod 'React-RCTTest', :path => "RCTTest"
end

# [TODO(macOS ISS#2323203): these are special targets used by the internal Microsoft build pipeline
target 'iosDeviceBuild' do
  platform :ios, '9.0'
  pods()
end

target 'iosSimulatorBuild' do
  platform :ios, '9.0'
  pods()
end

target 'macOSBuild' do
  platform :osx, '10.14'
  pods()
end
# ]TODO(macOS ISS#2323203)

post_install do |installer|
  # TODO(macOS): How do we reconcile flipper on macOS? For now disabling to unblock merge
  flipper_post_install(installer)
  installer.pods_project.targets.each do |target|
    puts target.name
    # [TODO(macOS ISS#2323203): the internal Microsoft build pipeline needs iOS arm64e slices
    if target.platform_name == :ios
      target.build_configurations.each do |config|
        (config.build_settings['ARCHS'] ||= ['$(ARCHS_STANDARD)']) << 'arm64e'
        puts '  adding arm64e to ' + config.name
      end
    end
    # ]TODO(macOS ISS#2323203)
  end
end
